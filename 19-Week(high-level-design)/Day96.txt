Design tinyURL
	Phase 1: Specification(Minimal Viable Product)
		2 - 5 minutes on discussing the structure
	
	Phase 2: Estimation of Scale(5 min)
			Traffic estimates:
			Storage estimates:
			Bandwidth estimates:

	Phase 3: Design Choices/ Preferences
			1- Consistency or Availabilty

	Phase 4: Design Skeleton
		Skeleton Design
		Depth of each component

	Phase 5: Look for bottleneck
		Like single point of failure
		Too many writes consuming the bandwidth of reads too


Phase 1:
	Type 1 : Given long URL find short URL
	Type 2 : Given Short URL redirect to long URL website
	Type 3 : Validity of URL -  infinite\

Phase 2:
	1 billion request per day, and only 0.1% request is of type 1.
		10 million writes
		990 million reads

	Choice of data structure 
		Hashmap
			length of short-url

			10M * 365 * 10 = 365 B

			36 character (0-9 + a-z)
			36^x > 365 B
			x=log36(365 * 10^12)/ 36  ===  7

		Query per second(QPS)
			990 million per day
			10000 QPS per second


		Storage
			100B * 10^6 === 0.2 GB
			0.2 * 365 * 10 === 730 GB

		Computation
			A machine can handle 1M request if it doesn't do anything

			But let 1 req takes 1ms, and we have 4 cores
			4 req takes 4ms
			so I can process 4000 queries per sec

Phase 3: Design Choice
	 
	Latency : Very important
	Consistency/ Availability : We move forward with consistency

Phase 4: 
	Design 
		API Design: 
			get_original_url(short_url)
				generate randomlly
			generate_short_url(original_url, auth_token)
				req ---  DB --- returns
						or
				req --- Cache --- DB --- return 

			---take care of error 

			Problem of inconsistency
				If N/2+1 servers returns success then success(write)
				read from all servers and if any returns then return it
				----run sync jobs in background

		Skeleton
		Deep dive

Ques - How would the design change if we facilitate delete and update of short url? 

Generating the key offline

How would we perform a key lookup? We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect” status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.


Data Partitioning and Replication
	Range based partitioning
	Hash based partitioning:(Consistent hashing)

Purging or DB cleanup
	
We can add a Load balancing layer at three places in our system:

	Between Clients and Application servers
	Between Application Servers and database servers
	Between Application Servers and Cache servers

Load Balancer
	Health Checks

	The load balancer can be a single point of failure; to overcome this, a second load balancer can be connected to the first to form a cluster