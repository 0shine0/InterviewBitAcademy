MVP
	Send messages reliably (Y)
	read the messages and list of conversation (Y)
	group messages (Y)
	file shares (Y)
	deletion of messages (Y)
	location share (N)
	add a contact (N)
	archive (N)
	notifications (Y)
	online/offline/ last seen/ typing status (N)
	payments (N)
	video call (N)

Estimation of scale
	20 B messages per day
	1 message ---> 2 mail box ---> 100 Bytes

	20 B * 2 * 100 = 2 TB per day

	2 * 365 * 10 = 7PB

	QPS --> 50B/86400 == 1 M QPS

Design Goals
	Consistency
	Latency: Important 

Deep Dive
	API
		sendMessage(auth, Recepient_id,message_data, message_id)
		groupMessage(auth, conversation_id,message_data,message_id)
		getConversationList(auth, user_id,pagesize,offset)
		getConversationList(auth, user_id,timestamp)
		deleteMessage(auth,user_id, message_id)
		createGroup(auth,creator_id)
		addMember(auth,conversation_id, person_id)
		removeMember(auth, conversation_id,person_id)
 
Cache is needed because I am sending message a lot, so if we are sending a message, then there is change in last seen, last conversation timestamp, last 40 messages, etc.
	Skeleton

		 Client
			|
	   Load Balancer
	   		|
	  Consistent Hashing
	 |		|	 |     |
	AS1   AS2   AS3   AS4   (Stateful,as cache will have data according to user)
	 |		|    |     |
	DB    DB    DB    DB

Group Messaging
Notification Service

readwrite_lock()


Asynchronous vs Synchronous
	Async call is non blocking call, creates parallel thread.
